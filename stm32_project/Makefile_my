# (C) Copyleft 2011 2012 2013 2014 2015 2016 2017 2018
# Late Lee(li@latelee.org) from http://www.latelee.org
# 
# A simple Makefile for *ONE* project(c or/and cpp file) in *ONE* or *MORE* directory
#
# note: 
# you can put head file(s) in 'include' directory, so it looks 
# a little neat.
#
# usage: 
#        $ make
#        $ make V=1     # verbose ouput
#        $ make CROSS_COMPILE=arm-arago-linux-gnueabi-  # cross compile for ARM, etc.
#        $ make debug=y # debug
#
# log
#       2013-05-14 sth about debug...
#       2016-02-29 sth for c/c++ multi diretory
#       2017-04-17 -s for .a/.so if no debug
#       2017-05-05 Add V for verbose ouput
###############################################################################

# !!!=== cross compile...
CROSS_COMPILE ?= arm-none-eabi-

MKDIR_P ?= mkdir -p

CC  = $(CROSS_COMPILE)gcc
CXX = $(CROSS_COMPILE)gcc
AR  = $(CROSS_COMPILE)ar
AS  = $(CROSS_COMPILE)gcc -x assembler-with-cpp
CP  = $(CROSS_COMPILE)objcopy
SZ  = $(CROSS_COMPILE)size
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

# !!!===
# in case all .c/.cpp need g++...
# CC = $(CXX)

ARFLAGS = -cr
RM      = -rm -rf
MAKE    = make

MCU     = -mcpu=cortex-m3 -mthumb $(FPU) $(FLOAT-ABI)
CFLAGS  = $(MCU) -Wall -fdata-sections -ffunction-sections
ASFLAGS = $(CFLAGS)
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(target).map,--cref -Wl,--gc-sections
DEFS    =
LIBS    = -lc -lm -lnosys 

# link script
LDSCRIPT = STM32F103R8Tx_FLASH.ld

# !!!===
# target executable file or .a or .so
target = out

# !!!===
# compile flags
CFLAGS += -Wall -Wfatal-errors -MMD

# !!!=== pkg-config here
#CFLAGS += $(shell pkg-config --cflags --libs glib-2.0 gattlib)
#LDFLAGS += $(shell pkg-config --cflags --libs glib-2.0 gattlib)

#****************************************************************************
# debug can be set to y to include debugging info, or n otherwise
debug  = y

#****************************************************************************

ifeq ($(debug), y)
    CFLAGS += -g -gdwarf-2
else
    CFLAGS += -O2 -s
endif

# !!!===
# Macros define here
DEFS_STR += STM32F103X_MD USE_STDPERIPH_DRIVER
DEFS     := $(addprefix -D, $(DEFS_STR))
CFLAGS   += $(DEFS)
CXXFLAGS = $(CFLAGS)

LIBS     += 

LDFLAGS  += $(LIBS)

# !!!===
# include head file directory here
INC = CORE FWLIB/inc HARDWARE SYSTEM USER
# or try this
#INC := $(shell find $(INC) -type d)

# !!!===
# build directory
BUILD_DIR ?= #./build/

# !!!===
# source file(s), including ALL c file(s) or cpp file(s)
# just need the directory.
SRC_DIRS = CORE FWLIB/src HARDWARE SYSTEM USER
# or try this
#SRC_DIRS = ./ 
#SRC_DIRS += ../outbox

# !!!===
# gcc/g++ compile flags
CFLAGS += $(INCDIRS)
CXXFLAGS += 

# !!!===
# gcc/g++ link flags
LDFLAGS += #-lpthread -lrt

DYNC_FLAGS += #-fpic -shared

INCDIRS := $(addprefix -I, $(INC))

#SRCS := $(shell find $(SRC_DIRS) -maxdepth 1 -name '*.cpp' -or -name '*.c' | grep -v main.cpp)
SRCS := $(shell find ./ -name '*.s' -or -name '*.c' | grep -v main.c)

OBJS = $(patsubst %.c,$(BUILD_DIR)%.o, $(patsubst %.s,$(BUILD_DIR)%.o, $(SRCS))) 

DEPS := $(OBJS:.o=.d)

ifeq ($(V),1)
Q=
NQ=true
else
Q=@
NQ=echo
endif

###############################################################################

# internal lib name, just ignore it
libtarget=libfoobar.a

all: $(BUILD_DIR)$(target).elf

# generate target, we need main.o here
$(BUILD_DIR)$(target): $(BUILD_DIR)$(libtarget) USER/main.o

	@$(NQ) "Generating executable file..." $(notdir $(target))
	$(Q)$(CXX) $(CXXFLAGS) $^ -o $(BUILD_DIR)$(target) $(BUILD_DIR)$(libtarget) $(LDFLAGS)
	$(SZ) $@
	@rm -rf $(BUILD_DIR)$(libtarget)

$(BUILD_DIR)$(libtarget): $(OBJS)
ifeq ($(suffix $(libtarget)), .so)
	@$(NQ) "Generating dynamic lib file..." $(notdir $(libtarget))
	$(Q)$(CXX) $(CXXFLAGS) $^ -o $(libtarget) $(LDFLAGS) $(DYNC_FLAGS)
else ifeq ($(suffix $(libtarget)), .a)
	@$(NQ) "Generating static lib file..." $(notdir $(libtarget))
	$(Q)$(AR) $(ARFLAGS) -o $(libtarget) $^
else
	@$(NQ) "Generating executable file..." $(notdir $(libtarget))
	$(Q)$(CXX) $(CXXFLAGS) $^ -o $(libtarget) $(LDFLAGS)
endif


# make all .c or .s
$(BUILD_DIR)%.o: %.s
	@$(MKDIR_P) $(dir $@)
	@$(NQ) "Compiling: " $(basename $(notdir $@)).s
	$(Q)$(AS) $(CFLAGS) -c $< -o $@

$(BUILD_DIR)%.o: %.c
	@$(MKDIR_P) $(dir $@)
	@$(NQ) "Compiling: " $(basename $(notdir $@)).c
	$(Q)$(CC) $(CFLAGS) -c $< -o $@

clean:
	@$(NQ) "Cleaning..."
	$(Q)$(RM) $(OBJS) $(target) $(DEPS)
# delete build directory if needed
ifneq ($(BUILD_DIR),)
	$(Q)$(RM) $(BUILD_DIR)
endif
# use 'grep -v soapC.o' to skip the file
	@find . -iname '*.o' -o -iname '*.bak' -o -iname '*.d' | xargs rm -f

.PHONY: all clean

-include $(DEPS)
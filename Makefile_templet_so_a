#
# (C) Copyleft 2011
# Late Lee from http://www.latelee.org
# 
# A simple Makefile for *ONE* project(c or/and cpp file) in *ONE*  directory
#
# note: 
# you can put head file(s) in 'include' directory, so it looks 
# a little neat.
#
# usage: $ make
#        $ make debug=y

# 同时生成.a和.so的Makefile
###############################################################################

# cross compile...
CROSS_COMPILE = 

CC = $(CROSS_COMPILE)gcc
CXX = $(CROSS_COMPILE)g++
AR = $(CROSS_COMPILE)ar

ARFLAGS = ar
RM = -rm -rf
MAKE = make

CFLAGS = -Wall
#debug = y

ifeq ($(debug), y)
CFLAGS += -g
else
CFLAGS += -O2 -s
endif

DEFS = 

CFLAGS += $(DEFS)

LDFLAGS = $(LIBS)

INCDIRS = ./inc

CFLAGS += -I$(INCDIRS) -I.

# 链接库
LDFLAGS += -lpthread -lrt

DYNC_FLAGS += -fpic -shared

# source file(s), including c file(s) cpp file(s)
# you can also use $(wildcard *.c), etc.
SRC_C   := $(wildcard *.c)
SRC_CPP := $(wildcard *.cpp)

# object file(s)
OBJ_C   := $(patsubst %.c,%.o,$(SRC_C))
OBJ_CPP := $(patsubst %.cpp,%.o,$(SRC_CPP))


# executable file
so_lib = libfoo.so
a_lib  = libfoo.a

###############################################################################

all: $(so_lib) $(a_lib)

$(so_lib): $(OBJ_C) $(OBJ_CPP)
	@echo "Generating dynamic lib file..." $(notdir $(so_lib))
	@$(CXX) $(CFLAGS) $^ -o $(so_lib) $(LDFLAGS) $(DYNC_FLAGS)

$(a_lib): $(OBJ_C) $(OBJ_CPP)
	@echo "Generating static lib file..." $(notdir $(a_lib))
	$(AR) $(ARFLAGS) -o $(a_lib) $^

# make all .c or .cpp
%.o: %.c
	@echo "Compling: " $(addsuffix .c, $(basename $(notdir $@)))
	@$(CC) $(CFLAGS) -c $< -o $@

%.o: %.cpp
	@echo "Compling: " $(addsuffix .cpp, $(basename $(notdir $@)))
	@$(CXX) $(CFLAGS) -c $< -o $@

clean:
	@echo "cleaning..."
	@$(RM) $(so_lib) $(a_lib)
	@$(RM) *.o *.back *~

.PHONY: all clean
